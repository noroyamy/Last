import telebot
import json
from datetime import datetime
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open('config.json', 'r', encoding='utf-8') as config_file:
        config = json.load(config_file)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit()

TOKEN = config['TOKEN']
ADMINS = config['ADMINS']
bot = telebot.TeleBot(TOKEN, parse_mode='Markdown')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown
user_data = {}
orders = []

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
def log_message(message):
    with open('logs.txt', 'a', encoding='utf-8') as log_file:
        log_file.write(f"{datetime.now()} - {message}\n")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_markup(buttons, row_width=2):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=row_width)
    markup.add(*[telebot.types.KeyboardButton(button) for button in buttons])
    return markup

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(chat_id):
    return chat_id in ADMINS

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'state': 'city'}  # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    bot.send_message(chat_id, "üèô –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=generate_markup(config['CITIES']))
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@bot.message_handler(commands=['orders'])
def view_user_orders(message):
    chat_id = message.chat.id
    user_orders = [order for order in orders if order['chat_id'] == chat_id]

    if user_orders:
        order_list = "\n".join([
            f"üÜî –ó–∞–∫–∞–∑ ‚Ññ{o['id']}\nüì¶ –ü—Ä–æ–¥—É–∫—Ç: {o['product']['name']}\nüíµ –¶–µ–Ω–∞: {o['product']['price']} ‚ÇΩ\nüìç –°—Ç–∞—Ç—É—Å: {o['status']}\n"
            for o in user_orders
        ])
        bot.send_message(chat_id, f"üìù –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n{order_list}")
    else:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['admin'])
def admin_menu(message):
    chat_id = message.chat.id
    if is_admin(chat_id):
        bot.send_message(
            chat_id,
            "üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é:",
            reply_markup=generate_markup(['üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'])
        )
    else:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text in ['üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'] and is_admin(message.chat.id))
def handle_admin_buttons(message):
    chat_id = message.chat.id
    text = message.text

    if text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã':
        if orders:
            order_list = "\n".join(
                [f"üÜî {o['id']} - {o['status']} - {o['product']['name']} - {o['product']['price']} ‚ÇΩ" for o in orders])
            bot.send_message(chat_id, f"üìë –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n\n{order_list}")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    elif text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂':
        bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        user_data[chat_id] = {'state': 'confirm_payment'}
    elif text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        user_data[chat_id] = {'state': 'cancel_order'}
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
        bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É –∏ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        user_data[chat_id] = {'state': 'add_product'}
    elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
        bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        user_data[chat_id] = {'state': 'remove_product'}
    elif text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
        user_data[chat_id] = {'state': 'city'}
        bot.send_message(
            chat_id,
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=generate_markup(config['CITIES'])
        )
@bot.message_handler(func=lambda message: message.text == 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é')
def go_to_main(message):
    chat_id = message.chat.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    user_data[chat_id] = {'state': 'city'}
    bot.send_message(
        chat_id,
        "üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=generate_markup(config['CITIES'] + ['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'])
    )
    
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'add_product')
def add_product(message):
    chat_id = message.chat.id
    text = message.text
    try:
        product_name, price, city = text.split(',')
        price = int(price.strip())
        if city in config['PRODUCTS']:
            config['PRODUCTS'][city].append({'name': product_name.strip(), 'price': price})
            bot.send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä {product_name.strip()} –¥–æ–±–∞–≤–ª–µ–Ω.")
            log_message(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {product_name.strip()} –≤ {city}")
            user_data[chat_id] = {}
        else:
            bot.send_message(chat_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'remove_product')
def remove_product(message):
    chat_id = message.chat.id
    text = message.text.strip()
    product_found = False

    for city, products in config['PRODUCTS'].items():
        product = next((p for p in products if p['name'] == text), None)
        if product:
            config['PRODUCTS'][city].remove(product)
            bot.send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä {text} —É–¥–∞–ª—ë–Ω.")
            log_message(f"–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω: {text}")
            user_data[chat_id] = {}
            product_found = True
            break

    if not product_found:
        bot.send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–∞–¥–º–∏–Ω)
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'confirm_payment' and is_admin(message.chat.id))
def confirm_payment(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text.isdigit():
        order_id = int(text)
        order = next((o for o in orders if o['id'] == order_id), None)
        if order:
            order['status'] = '–û–ø–ª–∞—á–µ–Ω–æ'
            bot.send_message(chat_id, f"‚úÖ –ü–ª–∞—Ç—ë–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            log_message(f"–ü–ª–∞—Ç—ë–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
            user_data[chat_id] = {}  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
            user_chat_id = order['chat_id']  # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(user_chat_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –ø–ª–∞—Ç—ë–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}.\n–¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            
        else:
            bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
        

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–∞–¥–º–∏–Ω)
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'cancel_order' and is_admin(message.chat.id))
def cancel_order_by_admin(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text.isdigit():
        order_id = int(text)
        order = next((o for o in orders if o['id'] == order_id), None)
        if order:
            order['status'] = '–û—Ç–º–µ–Ω—ë–Ω'
            bot.send_message(chat_id, f"‚úÖ –ü–ª–∞—Ç—ë–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç–º–µ–Ω—ë–Ω.")
            log_message(f"–ü–ª–∞—Ç—ë–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç–º–µ–Ω—ë–Ω.")
            user_data[chat_id] = {}  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        else:
            bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞, —Ä–∞–π–æ–Ω–∞, –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'city')
def handle_city_selection(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text in config['CITIES']:
        user_data[chat_id]['city'] = text
        user_data[chat_id]['state'] = 'district'  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        bot.send_message(chat_id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:", reply_markup=generate_markup(config['DISTRICTS'][text] + ['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']))
    else:
        bot.send_message(chat_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=generate_markup(config['CITIES'] + ['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']))
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'district')
def handle_district_selection(message):
    chat_id = message.chat.id
    text = message.text
    city = user_data[chat_id]['city']

    if text in config['DISTRICTS'].get(city, []):
        user_data[chat_id]['district'] = text
        user_data[chat_id]['state'] = 'product'
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
        product_buttons = [f"{p['name']} - {p['price']} ‚ÇΩ" for p in config['PRODUCTS'][city]]
        bot.send_message(chat_id, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=generate_markup(product_buttons))
    else:
        bot.send_message(chat_id, "‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        

@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'product')
def handle_product_selection(message):
    chat_id = message.chat.id
    text = message.text.split(' - ')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥–æ –¥–µ—Ñ–∏—Å–∞)
    city = user_data[chat_id]['city']

    product = next((p for p in config['PRODUCTS'][city] if p['name'] == text), None)
    if product:
        user_data[chat_id]['product'] = product
        user_data[chat_id]['state'] = 'payment'
        bot.send_message(chat_id, "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=generate_markup([m['method'] for m in config['PAYMENT_METHODS']]))
    else:
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'payment')
def handle_payment_method(message):
    chat_id = message.chat.id
    text = message.text

    payment_method = next((m for m in config['PAYMENT_METHODS'] if m['method'] == text), None)
    if payment_method:
        user_data[chat_id]['payment_method'] = text
        user_data[chat_id]['state'] = 'confirm'
        product = user_data[chat_id]['product']
        bot.send_message(chat_id, f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n\nüì¶ –ü—Ä–æ–¥—É–∫—Ç: {product['name']}\nüíµ –¶–µ–Ω–∞: {product['price']} ‚ÇΩ", reply_markup=generate_markup(['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']))
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == 'confirm')
def handle_confirm_order(message):
    chat_id = message.chat.id
    text = message.text

    if text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        process_order(chat_id)
    elif text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
        cancel_order(chat_id)
    else:
        bot.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def process_order(chat_id):
    order_id = len(orders) + 1
    order = user_data.pop(chat_id)
    order['id'] = order_id
    order['chat_id'] = chat_id
    order['status'] = '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    orders.append(order)

    payment_details = generate_payment_details(order)
    bot.send_message(chat_id, f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n{payment_details}")
    bot.send_message(chat_id, "üîî –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    bot.send_sticker(chat_id, 'CAACAgIAAxkBAAImwGdxm8gsLgmbgmbgK1OnPJy_q1GfAAI3KAAC2p9hSi5TiqC7b7qaNgQ',
                     
    reply_markup=generate_markup(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é'])
                    )
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
def generate_payment_details(order):
    product_name = order['product']['name']
    product_price = order['product']['price']
    payment_method = order['payment_method']

    payment_details = config['PAYMENT_METHODS'][0]  # Placeholder for actual payment method details

    return (
        f"üîë **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n"
        f"üÜî **–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞**: `{order['id']}`\n"
        f"üì¶ **–¢–æ–≤–∞—Ä**: `{product_name}`\n"
        f"üíµ **–°—É–º–º–∞**: `{product_price} ‚ÇΩ`\n"
        f"üí≥ **–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã**: `{payment_method}`\n\n"
        f"üíº **–†–µ–∫–≤–∏–∑–∏—Ç—ã**: `{payment_details['details']}`\n"
    )

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def cancel_order(chat_id):
    user_data.pop(chat_id, None)
    bot.send_message(chat_id, "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=generate_markup(['üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é']))


    

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def notify_user(chat_id, message):
    try:
        bot.send_message(chat_id, message)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config():
    try:
        with open('config.json', 'w', encoding='utf-8') as config_file:
            json.dump(config, config_file, ensure_ascii=False, indent=4)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞
def close_bot():
    save_config()
    log_message("–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
import signal
import sys

def signal_handler(sig, frame):
    close_bot()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    try:
        log_message("–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")
        bot.polling(non_stop=True)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
        close_bot()